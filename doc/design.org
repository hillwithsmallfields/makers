#+TITLE: The design of the Makers system
#+AUTHOR: John Sturdy
#+BEAMER_FRAME_LEVEL: 2
* The inspiration
** Why I wrote the system
   I wrote the system because of the unsuitability of the system my
   local hackerspace, Makespace, was using for signing up for training
   on equipment, which works by setting up training sessions on
   meetup.com and announcing them on Google Groups.
** The problems with the old system
   The main problem with this is that the first people to respond to
   the announcments get the training slots, regardless of how long
   they have been waiting, and people can be left waiting for a long
   time.

   Other problems include that there's no automatic check that those
   signing up are eligible, and no way of tracking those who
   repeatedly sign up for training but do not attend.
** The solution
   The solution to this is a system that allows people to sign up for
   training in advance, then be offered training sessions as they
   become available, with those who have been waiting for longest
   getting priority.
* The central idea
** Events are central  
   After some experimentation with ideas for how to represent the
   information, one idea stood out above the others: that the central
   data items are not the users, nor the equipment types (although
   these are important), but events (training sessions) linking them.
** How events hold the information together
   The fact that a particular user is trained for a given role on a
   given piece of equipment is represented by the existence of a past
   training event for that role on that equipment, in which the user
   is on the list of attendees who completed the event successfully.
   The event also lists its hosts (trainers), and retains the date and
   time at which it happened, to allow the granting of the permission
   to use that equipment to be traced.

   Loss of permission to use an equipment type is represented by the
   user being shown as having attended a de-training event on it,
   which can be set up by an administrator.  A training event for that
   user can be scheduled at the same time, to become active in at a
   future time, to make temporary bans; and de-training events can be
   scheduled when training events are, to make training that needs
   refreshers after a given period.
** Other key data
   As well as events, the system holds data objects for users,
   equipment types, and individual pieces of equipment.
** Consistent use of the same ideas
   The organization (hackerspace) itself is treated as a piece of
   equipment, and being trained on that equipment (that is, having
   attended its training --- the new members' induction ---
   successfully) is used to represent membership.

   The same applies to the database system: being an adminstrator is
   represented by having successfully attended a training event on it.
** Event creation
   Events are created from templates, and the template includes
   controls on who can use it to create an event, as well as who can
   sign up for it, as part of a flexible "prerequisites" system .  For
   example, for a normal training event, only someone who has attended
   a "train the trainers" event on that type of equipment can create
   an event from that template; and for all events except the initial
   induction, being a member (i.e. having been trained on the
   hackerspace itself) is a prerequisite.
* What naturally followed
** More types of events
   Once events were established as the centre of the system, a lot more
   could be fitted into place around them.

   Since future events can be displayed on a calendar, and current
   events on a monitor by the door, it makes sense to represent all
   types of events in the hackerspace, not just training sessions.
** Booking
   Makespace doesn't allow for equipment booking other than for
   training sessions.  The system I have produced makes provision for
   this: as well as being for a particular type of equipment, a
   training session can specify individual instances of that type that
   the session will be using, thus reserving them.

   Applying the same principle as representing the organization as an
   equipment type, rooms in the facility can be represented as
   equipment, thus allowing booking of the classroom, for example (but
   with past attendance of "how to use the classroom" training as a
   prerequisite, of course).
** User profiles
   Since users have profiles and can log into the system, it's easy
   enough for them to provide further information (voluntarily) to
   improve the use of the system.
** Optimizing training invitations
   One form of this is that users can specify which timeslots in a
   week they are definitely not available, so that when a training
   session is created, the people who are interested but not available
   at that time will not be notified.  (This is significant because
   only as many people as can fit into the session will be notified
   initially, and more will be notified as "can't make this one"
   responses come in, so it will work faster if it doesn't have to
   wait for replies from people who have said in advance they can't
   make it.)

   I believe Makespace would like this one to be turned off; this will
   be done by remove that section from the profile editor, so they
   can't mark times that they can't make.
** Interest profiles
   The system allows events and users to have interest profiles,
   indicating interest areas and levels (none / beginner /
   practitioner / teacher), so people can be notified when an event of
   likely interest to them is created.

   Again, I gather Makespace wouldn't like this to be used, so it will
   be configured out of the profile editor in Makespace's
   installation.
** Privacy levels
   The profile system gives the users control over the visibility of
   their identifying information (names) in various situations:
   whether they are generally visible, visible as the hosts of an
   event to everyone or to those signed up for the event, visible as
   attendees of an event to hosts or to others signed up for the
   event.

   The privacy system is designed to suit everyone from those who fear
   that they may be stalked by other members of the organization,
   through those who wish their names to be as visible as they are
   now, to those who wish to self-promote in the hope of getting
   freelance contracts!
* Export of data
** Control of data export
   The GDPR requires users to be able to access their data.  As well
   as them being able to see the data through their profile pages
   (redacted as necessary where other users' information is involved
   --- for example, the host of a training event might not want their
   name to be visible to attendees), they are able to extract their
   data as JSON through an API.  This not only supports the GDPR
   requirements, but may also be useful to those in the Quantified
   Self movement.
** Export to our machine controllers
   Another part of the API can produce lists of the current keyfob
   identifiers of users allowed to use each type of equipment, to
   allow devices with a suitable controller to enable themselves only
   on presentation of the fob of a permitted user.  This also allows
   the machine usage to be logged per user, for tracing damage to
   equipment.  These lists do not normally include the users' names,
   although they could be added (subject to profile privacy settings)
   for machine types that can display the name of the current user (in
   particular, the 3D printers).
** Exchange with other organizations
   We could export a users' qualification list, with a digital
   signature, for import into compatible systems run by other
   hackerspaces who have looked at our training and decided that it is
   equivalent to their own training.

