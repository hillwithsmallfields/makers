# YAML file describing the data (almost like a schema)

# RHS words that look like type descriptions usually are type
# descriptions, but it's not really a DB schema; these are directions
# to the programs on what to do with these fields.

# The config data is kept as YAML rather than inside the mongodb
# database, so it can be version-controlled under git etc.

# Where there's a choice of whether to store data attached to a person
# or to something else, e.g. whether they are trained, or an owner, on
# a piece of equipment, we'll generally attach the data to a person,
# because, for example, training a person on a device changes the
# state of the person, not of the device.

person:
  status:
    ALL:
      fields:
        email:           email
        surname:         string
        given_name:      string
        known_as:        string
    registered:                 # anyone who has self-registered on the site e.g. with a view to doing See the Space
      fields:
        date_registered: date
      actions:
        - attend_meeting
        - signup_see_the_space
    interested:                 # people who have signed up for See the Space
      times_available: timeslots
    visited:                    # people who have done See the Space and are eligible to apply for induction
      date_registered: date
      date_visited:    date
      times_available: timeslots
      actions:
        - signup_induction
    applicant:                  # people who have applied for induction
    member:                     # inducted members
      fields:
        date_registered: date
        date_visited:    date
        date_joined:     date
        inducted_by:     person
        date_suspended:  date   # there is no concept of leaving the organization, only suspending membership without rejoining since
        date_resumed:    date
        address:         postal
        # for each user, there are lists of their relationships with equipments
        trained_on:      [ (equipment_class, date) ]
        trainer_for:     [ (equipment_class, date) ]
        owner_for:       [ (equipment_class, date) ]
        merits:          number # keep track of people doing things for the space such as running training
        demerits:        number # keep track of number of times someone has signed up for something but not attended
        administrator:   date   # date since, instead of boolean
      times_available:   timeslots # see below for description of timeslots

# These make up bitmaps, which should fit into a Python integer, so
# assuming 7 days, you can have up to four time slots per day even on
# a 32-bit system.  A timeslots bitmap is part of a user's profile,
# and each event instance (e.g. a training session) has a time, so the
# system can work out who to offer slots to when a training session
# becomes available.

timeslots:
  days:
    - Monday
    - Tuesday
    - Wednesday
    - Thursday
    - Friday
    - Saturday
    - Sunday
  times:
    - morning
    - afternoon
    - evening

# There'll be a template system for instantiating events for people to
# sign up to.  'requirement' describes the condition for being
# eligible to sign up for something, and 'transition' for what happens
# if the host confirms their successful attendance.

events:
  ALL:
    fields:
      date:       date
      start_time: time
      duration:   duration
      host:       member
  see_the_space:
    requirement: interested
    transition:  visited
  induction:
    requirement: visited
    transition:  member
  training:
    requirement: member
    transition:  trained_on
    host:        trainer_for
    fields:
      equipment: equipment_class
  meeting:
    fields:
      location: location
  hackathon:
    fields:
      location: location

locations:
  main_space:
    name: Main space
  classroom:
    name: Classroom
    capacity:
      tables: 30
      seated: 60
  trove:
    name: Trove
  office:
    name: Office
  workshop:
    name: Secure workshop
  craft_room:
    name: Craft room
  corridor:
    name: Corridor
  kitchen:
    name: Cakespace

# The data which is the same for each piece of the same type of
# equipment, so we don't have to repeat it.  Members get trained on an
# equipment class, not an individual instance of the equipment.
    
equipment_classes:
  makespace:
    description: The hackerspace itself.  Its equipment training is the induction.
  laser_cutter:
    training_class: red
    manufacturer:   laserscript
  ultimaker:
    training_class: red
  formlabs:
    training_class: red
  vacuum_former:
    training_class: amber
    manufacturer:   Formech
  warco_metal_mill:
    manufacturer:   Warco
    training_class: red
  metal_lathe:
    training_class: red
  wood_lathe:
    training_class: red
  projector:
    training_class: green

training_classes:
  red:
    training_required: Yes
    training_available: Yes
  amber:
    training_required: No
    training_available: Yes
  green:
    training_required: No
    training_available: No

page:
  stylesheet: makers.css
  preamble:  <p>Top navigation bar etc will go here.</p>
  postamble: <p>Bottom navigation bar etc will go here.</p>

database:
  URI: mongodb://localhost/
  database_name: Makespace
  collections:
    people:    MakespacePeople
    equipment: MakespaceEquipment
    events:    MakespaceEvents

# The names in this section indicate which equipment class names
# are magical

organization:
  # Being trained on the equipment class named here means being
  # inducted; being a trainer on it means being an inductor.
  name:        makespace
  # Being a trained user on the equipment class named here gives you
  # read access to the database; being an owner on it gives you write access
  database:    makespace_admin_db
