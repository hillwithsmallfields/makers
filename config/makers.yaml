# YAML file describing the data
# RHS words that look like type descriptions usually are type descriptions

# The config data is kept as YAML rather than inside the mongodb database, so it can be version-controlled under git etc

person:
  status:
    ALL:
      fields:
        email:           email
        surname:         string
        given_name:      string
        known_as:        string
    registered:                 # anyone who has self-registered on the site e.g. with a view to doing See the Space
      fields:
        date_registered: date
      actions:
        - attend_meeting
        - signup_see_the_space
    interested:                 # people who have signed up for See the Space
      times_available: timeslots
    visited:                    # people who have done See the Space and are eligible to apply for induction
      date_registered: date
      date_visited:    date
      times_available: timeslots
      actions:
        - signup_induction
    applicant:                  # people who have applied for induction
    member:                     # inducted members
      fields:
        date_registered: date
        date_visited:    date
        date_joined:     date
        date_suspended:  date   # there is no concept of leaving the organization, only suspending membership without rejoining since
        date_resumed:    date
        address:         postal
        # for each user, there are lists of their relationships with equipments
        trained_on:      [ (equipment_class, date) ]
        trainer_for:     [ (equipment_class, date) ]
        owner_for:       [ (equipment_class, date) ]
        merits:          number # keep track of people doing things for the space such as running training
        demerits:        number # keep track of number of times someone has signed up for something but not attended
        administrator:   date   # date since, instead of boolean
      times_available:   timeslots # see below for description of timeslots

# These make up bitmaps, which should fit into a Python integer, so
# assuming 7 days, you can have up to four time slots per day even on
# a 32-bit system.

timeslots:
  days:
    - Monday
    - Tuesday
    - Wednesday
    - Thursday
    - Friday
    - Saturday
    - Sunday
  times:
    - morning
    - afternoon
    - evening

# There'll be a template system for instantiating events for people to
# sign up to.  'requirement' describes the condition for being
# eligible to sign up for something, and 'transition' for what happens
# if the host confirms their successful attendance.

events:
  ALL:
    fields:
      date:       date
      start_time: time
      duration:   duration
      host:       member
  see_the_space:
    requirement: interested
    transition:  visited
  induction:
    requirement: visited
    transition:  member
  training:
    requirement: member
    transition:  trained_on
    host:        trainer_for
    fields:
      equipment: equipment
  meeting:
    fields:
      location: location
  hackathon:
    fields:
      location: location

locations:
  main_space:
    name: Main space
  classroom:
    name: Classroom
    capacity:
      tables: 30
      seated: 60
  trove:
    name: Trove
  office:
    name: Office
  workshop:
    name: Secure workshop
  craft_room:
    name: Craft room
  corridor:
    name: Corridor
  kitchen:
    name: Cakespace

# The data which is the same for each piece of the same type of
# equipment, so we don't have to repeat it.  Members get trained on an
# equipment class, not an individual instance of the equipment.
    
equipment_classes:
  makespace:
    description: The hackerspace itself.  Its equipment training is the induction.
  laser_cutter:
    training_class: red
    manufacturer:   laserscript
  ultimaker:
    training_class: red
  formlabs:
    training_class: red
  vacuum_former:
    training_class: amber
    manufacturer:   Formech
  warco_metal_mill:
    manufacturer:   Warco
    training_class: red

training_classes:
  red:
    training_required: Yes
    training_available: Yes
  amber:
    training_required: No
    training_available: Yes
  green:
    training_required: No
    training_available: No

# The list of individual instances of equipment.
    
equipment:
  makespace:
    class:    makespace
    name:     Makespace
    acquired: 2012
  betsy:
    class:    laser_cutter
    name:     Betsy
    location: main_space
    supplier: HPC Laser
  jaws:
    class:    laser_cutter
    name:     Jaws
    location: main_space
    supplier: HPC Laser
  pla_printer_1:
    class:    ultimaker
    location: main_space
  pla_printer_2:
    class:    ultimaker
    location: main_space
  abs_printer_1:
    class:    ultimaker
    location: main_space
  abs_printer_2:
    class:    ultimaker
    location: main_space
  metal_mill_1:
    class:    warco_metal_mill
    location: workshop
